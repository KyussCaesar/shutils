#!/bin/bash
# Find and open files for editing.
#
# Usage: edit [ --find | --grep ] <names...> [ '--' <options...> ]
#
# The --find/--grep flags set the search mode, which is used to select files:
#
#   --find: use `find . -name <name>` to select files. This is the default.
#   --grep: use `rg --files-with-matches <name>` to select files.
#
# For each name, use the search method to select files.
# The complete list of files is passed to your $EDITOR.
# If $EDITOR is not set, uses one of vim, nano, vi, ed; whichever can be found
# first.
#
# Any options (arguments after `--`) will be forwarded to the editor which is used.


# Examples:
#
#   BASIC USAGE:
#
#   # find all files called 'foobar.cfg', and open them with the default editor.
#   edit foobar.cfg
#
#   # find all files containing the pattern 'hello world', and open them with the default editor.
#   edit --grep 'hello world'
#
#
#   FORCING A SPECIFIC EDITOR TO BE USED:
#
#   # find all files called 'foobar.cfg', and ensure they are opened with vim.
#   EDITOR=vim edit 'foobar.cfg'
#
#
#   PASSING OPTIONS TO THE EDITOR
#
#   # find all files called 'baz', and open them with nano.
#   # also provide the -m switch to nano, which enables mouse support.
#   EDITOR=nano edit baz -- -m
#
#
#   ADVANCED USAGE
#
#   # find all files that define a Python function called `frobinate`.
#   # open the files in vim, in vertical splits
#   EDITOR=vim edit --grep 'def frobinate\(' -- -O

set -e

# uses the users $EDITOR, if set.
# otherwise, will use one of vim, nano, vi, ed; whichever is found first.
detect_editor () {
  if ! [ -z "$EDITOR" ]
  then
    return 0
  fi

  local EDITORS=(vim nano vi ed)
  for editor in "${EDITORS[@]}"
  do
    if command -v "$editor" &>/dev/null
    then
      export EDITOR=$(which "$editor")
      return 0
    fi
  done
}

detect_editor

# bail if we still don't know what editor to use
if [ -z "$EDITOR" ]
then
  echo "error: could not find an editor to use" >&2
  exit 1
fi

# process args
FILES=
OPTS=

SEARCH_MODE="--find"
SEARCH_DIR="$(pwd)"

# while loop; so you can override by specifying more than once
while :;
do
  case "$1" in
    --find)
      # will treat args as filenames to search for
      SEARCH_MODE=--find
      shift
      ;;

    --grep)
      # will treat args as patterns to search for
      SEARCH_MODE=--grep
      shift
      ;;

    --dir | -d)
      # which dir to search from (default= working directory)
      shift
      SEARCH_DIR="$1"
      shift
      ;;

    --* | -*)
      echo "$1: not a recognised option." >&2
      exit 1
      ;;

    *)
      # not a recognised option/flag, so stop processing and treat the rest as files
      break
  esac
done

while [ $# -ne 0 ]
do
  if [ "$1" = "--" ]
  then
    # the rest are options; 
    shift
    OPTS="$@"
    break

  else
    # dispatch depending on search mode
    if [ "$SEARCH_MODE" = "--find" ]
    then
      add=$(find "$SEARCH_DIR" -name "$1")

    elif [ "$SEARCH_MODE" = "--grep" ]
    then
      add=$(rg --files-with-matches "$1" "$SEARCH_DIR")

    fi

    # add to the list of files
    # hopefully no names with spaces! :D
    FILES="$FILES $add"
    shift

  fi
done

# print the list of files, so you can see which ones are being opened
# helpful for diagnostic, if a pattern is not working properly
for file in $(echo $FILES | sort)
do
  echo $file
done

$EDITOR $OPTS $FILES

